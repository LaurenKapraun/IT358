//
//  main.swift
//  assign2
//
//  Created by Lauren Kapraun on 1/27/20.
//  Copyright Â© 2020 Lauren Kapraun. All rights reserved.
//

//******************** QUESTION B ********************//
/*
import Foundation

class Fraction {
    let numerator, denominator: Int

    init (numerator: Int, denominator: Int) {
        self.numerator = numerator
        self.denominator = denominator
    }
    
    func reduce (_ numerator: Int, _ denominator: Int) -> String {
        var numerator = self.numerator
        var denominator = self.denominator
        
        var n = numerator
        var d = denominator
        
        func gcd(_ n: Int, _ d: Int) -> Int {
            let r = n % d
            
            if (r != 0) {
                return gcd(d, r)
            } else {
                return d
            }
        }
        
        let finalGCD = gcd(numerator, denominator)
        
        numerator = numerator / finalGCD
        denominator = denominator / finalGCD
       
        
        return "\(numerator)/\(denominator)"
    }
}

func add(_ fraction1:Fraction, _ fraction2:Fraction) -> Fraction {
  let d1 = fraction1.denominator
  let d2 = fraction2.denominator
  let n1 = fraction1.numerator
  let n2 = fraction1.numerator

  // Greatest Common Denominator
  var gcd = 0

  if (d2%d1 == 0) {
    gcd = d1;
  } else{
    gcd = d2%d1;
  }
  
  let denominator = (d1*d2) / gcd;
  let numerator = ((n1)*(denominator/d1)) + ((n2)*(denominator/d2))

  return Fraction(numerator: numerator, denominator: denominator)
}

func subtract(_ fraction1:Fraction, _ fraction2:Fraction) -> Fraction {
  let d1 = fraction1.denominator
  let d2 = fraction2.denominator
  let n1 = fraction1.numerator
  let n2 = fraction1.numerator

  let commonDenominator = d1%d2
  let largerDenominator = max(d1, d2)
  
  let numerator = (n1*commonDenominator) - n2
  let denominator = commonDenominator*largerDenominator
  
  return Fraction(numerator: numerator, denominator: denominator)
}

func multiply(_ fraction1:Fraction, _ fraction2:Fraction) -> Fraction {
  let d1 = fraction1.denominator
  let d2 = fraction2.denominator
  let n1 = fraction1.numerator
  let n2 = fraction1.numerator

  let numerator = n1*n2
  let denominator = d1*d2
  
  return Fraction(numerator: numerator, denominator: denominator)
}

func divide(_ fraction1:Fraction, _ fraction2:Fraction) -> Fraction {
  let d1 = fraction1.denominator
  let d2 = fraction2.denominator
  let n1 = fraction1.numerator
  let n2 = fraction1.numerator

  let numerator = n1*d2
  let denominator = d1*n2
  
  return Fraction(numerator: numerator, denominator: denominator)
}

let f1 = Fraction(numerator: 1, denominator: 2)
let f2 = Fraction(numerator: 1, denominator: 6)
let f3 = Fraction(numerator: 1, denominator: 3)

let d1 = f1.denominator
let d2 = f2.denominator
let d3 = f3.denominator
let n1 = f1.numerator
let n2 = f2.numerator
let n3 = f3.numerator

let fAdd = add(f1, f2)
let fSubtract = subtract(f1, f3)
let fMultiply = multiply(f1, f3)
let fDivide = divide(f1, f3)

print("The addition of \(n1)/\(d1) + \(n2)/\(d2) is: \(fAdd.numerator)/\(fAdd.denominator)")
print("The subtraction of \(n1)/\(d1) + \(n3)/\(d3) is: \(fSubtract.numerator)/\(fSubtract.denominator)")
print("The multiplication of \(n1)/\(d1) * \(n3)/\(d3) is: \(fMultiply.numerator)/\(fMultiply.denominator)")
print("The division of \(n1)/\(d1) * \(n3)/\(d3) is: \(fDivide.numerator)/\(fDivide.denominator) \n")

print("\(fAdd.numerator)/\(fAdd.denominator) reduced is: \(fAdd.reduce(fAdd.numerator, fAdd.denominator)) \n")
*/


//******************** QUESTION A ********************//
/*
import Foundation

print("How many temperatures do you have? ", terminator: "")

if let size = readLine(){
    if let size = Int(size){
        // Create variables for the array, sum, and average
        var temperature:[Double] = []
        var sum: Double = 0.0
        var average: Double = 0.0

        // Read temperatures
        print("Enter \(size) temperatures: ", terminator: "")
        for i in 1...size{
            if let temperatures = readLine(){
               if let temperatures = Double(temperatures){
                    temperature.append(temperatures)
                }
            }
        }

        // Compute temperature average & sum
        for temperatures in temperature{
            sum += temperatures
            average = sum/Double(temperature.count)
        }
        print("The average temperature is \(average)")

        // Display each temperature and its relation to the average:
        print("The temperatures are")
        for temperatures in temperature{
            if(temperatures < average){
                print("\(temperatures) below average.")
            }
            else if(temperatures > average){
                print("\(temperatures) above average.")
            }
            else{
                //temperature[index] == average
                print("\(temperatures) the average.")
            }
        }

         print("Have a nice week.")
    }
}
*/
